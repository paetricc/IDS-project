---Priprava---
DROP TABLE ZAMESTNANEC CASCADE CONSTRAINTS;
DROP TABLE ZAJEMCE CASCADE CONSTRAINTS;
DROP TABLE MAJITEL CASCADE CONSTRAINTS;
DROP TABLE UZIVATEL;
DROP TABLE NABIDKA CASCADE CONSTRAINTS;
DROP TABLE SMLOUVA;
DROP TABLE NEMOVITOST CASCADE CONSTRAINTS;
DROP TABLE PROHLIDKA;

---Tabulky---

CREATE TABLE Uzivatel
(
    UzivatelID     int GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Jmeno          varchar(255) NOT NULL,
    Prijmeni       varchar(255) NOT NULL,
    Heslo          varchar(32)  NOT NULL,
    Telefoni_cislo varchar(15)  NOT NULL,
    Email          varchar(255) NOT NULL
        CHECK (REGEXP_LIKE(Email, '[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}'))
);

CREATE TABLE Zamestnanec
(
    ZamestnanecID int GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Rodne_cislo   VARCHAR(11) NOT NULL
        CHECK (mod(to_number(replace(Rodne_cislo,'/', '')), 11) = 0)
        CHECK (REGEXP_LIKE(Rodne_cislo, '[0-9]{2}[0156][0-9][0-3][0-9]\/[0-9]{3,4}')),
    Uzivatel      int        NOT NULL,

    CONSTRAINT Zamestnanec_Uzivatel_FK
        FOREIGN KEY (Uzivatel)
            REFERENCES Uzivatel (UzivatelID)
                ON DELETE CASCADE
);

CREATE TABLE Zajemce
(
    ZajemceID int GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Uzivatel  int NOT NULL,

    CONSTRAINT Zajemce_Uzivatel_FK
        FOREIGN KEY (Uzivatel)
            REFERENCES Uzivatel (UzivatelID)
                ON DELETE CASCADE
);

CREATE TABLE Majitel
(
    MajitelID int GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Uzivatel  int NOT NULL,

    CONSTRAINT Majitel_Uzivatel_FK
        FOREIGN KEY (Uzivatel)
            REFERENCES Uzivatel (UzivatelID)
                ON DELETE CASCADE
);

CREATE TABLE Nemovitost
(
    NemovitostID      int GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Kategorie         VARCHAR(255) NOT NULL
        CHECK (Kategorie IN ('Byt', 'Dům', 'Projekt', 'Pozemek', 'Komerční', 'Ostatní')),
    Typ               VARCHAR(255) DEFAULT NULL,
    Stav_objektu      varchar(255) NOT NULL,
    Cena              number(9)    NOT NULL,
    Ulice             varchar(255) NOT NULL,
    Cislo_popisne     number(10)   NOT NULL,
    Orientactni_cislo varchar(10)  NOT NULL,
    Mesto             varchar(255) NOT NULL,
    PSC               number(10)   NOT NULL,
    Majitel           int          NOT NULL,

    CONSTRAINT Nemovitost_Majitel_FK --nabidl
        FOREIGN KEY (Majitel)
            REFERENCES Majitel (MajitelID)
                ON DELETE CASCADE
);

CREATE TABLE Nabidka
(
    NabidkaID  int GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Cena       NUMBER(9),
    Nemovitost int NOT NULL,
    Zajemce    int NOT NULL,

    CONSTRAINT Nabidka_Nemovitost_FK --byla nabizena
        FOREIGN KEY (Nemovitost)
            REFERENCES Nemovitost (NemovitostID)
                ON DELETE CASCADE,

    CONSTRAINT Nabidka_Zajemce_FK    --nabidl
        FOREIGN KEY (Zajemce)
            REFERENCES Zajemce (ZajemceID)
                ON DELETE CASCADE
);

CREATE TABLE Smlouva
(
    SmlouvaID   int GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Datum       date         NOT NULL,
    Stav        varchar(255) NOT NULL
        CHECK (Stav IN ('Otevřená', 'Uzavřená')),
    Zamestnanec int          NOT NULL,
    Zajemce     int          NOT NULL,
    Nemovitost  int          NOT NULL,

    CONSTRAINT Smlouva_Zamestnanec_FK --sjednal
        FOREIGN KEY (Zamestnanec)
            REFERENCES Zamestnanec (ZamestnanecID)
                ON DELETE CASCADE,

    CONSTRAINT Smlouva_Zajemce_FK     --je vystavena
        FOREIGN KEY (Zajemce)
            REFERENCES Zajemce (ZajemceID)
                ON DELETE CASCADE,

    CONSTRAINT Smlouva_Nemovitos_FK   --je kupována
        FOREIGN KEY (Nemovitost)
            REFERENCES Nemovitost (NemovitostID)
                ON DELETE CASCADE

);

CREATE TABLE Prohlidka
(
    ProhlidkaID int GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Datum_cas   date NOT NULL,
    Zamestnanec int  NOT NULL,
    Zajemce     int  NOT NULL,
    Nemovitost  int  NOT NULL,

    CONSTRAINT Prohlidka_Zamestnanec_FK --zorganizoval
        FOREIGN KEY (Zamestnanec)
            REFERENCES Zamestnanec (ZamestnanecID)
                ON DELETE CASCADE,

    CONSTRAINT Prohlidka_Zajemce_FK     --zada
        FOREIGN KEY (Zajemce)
            REFERENCES Zajemce (ZajemceID)
                ON DELETE CASCADE,

    CONSTRAINT Prohlidka_Nemovitost_FK  --se vztahuje
        FOREIGN KEY (Nemovitost)
            REFERENCES Nemovitost (NemovitostID)
                ON DELETE CASCADE
);
---Insert data---

INSERT INTO UZIVATEL (Jmeno, Prijmeni, Heslo, Telefoni_cislo, Email)
values ('Petr', 'Marek', '2IODW9HC6BQX9V5S2Y4J4TV8IS0DICPB', 732288327, 'PetrMarek@dayrep.com');
INSERT INTO UZIVATEL (Jmeno, Prijmeni, Heslo, Telefoni_cislo, Email)
values ('František', 'Jakubčík', '2IODW9HC6BQX9V5S2Y4J4TV8IS0DICPB', 605403788, 'franta.jakubcik@dayrep.com');
INSERT INTO UZIVATEL (Jmeno, Prijmeni, Heslo, Telefoni_cislo, Email)
values ('Jiří', 'Bartoš', '2IODW9HC6BQX9V5S2Y4J4TV8IS0DICPB', 578566402, 'Jiri_Bartos@dayrep.com');
INSERT INTO UZIVATEL (Jmeno, Prijmeni, Heslo, Telefoni_cislo, Email)
values ('František', 'veselý', '2IODW9HC6BQX9V5S2Y4J4TV8IS0DICPB', 563940456, 'FrantisekVesely@televorm.us');
INSERT INTO UZIVATEL (Jmeno, Prijmeni, Heslo, Telefoni_cislo, Email)
values ('Jan', 'Pokuta', '2IODW9HC6BQX9V5S2Y4J4TV8IS0DICPB', 726247924, 'JanPokuta@armyspy.com');
INSERT INTO UZIVATEL (Jmeno, Prijmeni, Heslo, Telefoni_cislo, Email)
values ('Tomáš', 'Kovář', '2IODW9HC6BQX9V5S2Y4J4TV8IS0DICPB', 557391817, 'TomasKovar@rhyta.com');
INSERT INTO UZIVATEL (Jmeno, Prijmeni, Heslo, Telefoni_cislo, Email)
values ('Nikola', 'Nesládková', '2IODW9HC6BQX9V5S2Y4J4TV8IS0DICPB', 563924081, 'NikolaNesladkova@teleworm.us');
INSERT INTO UZIVATEL (Jmeno, Prijmeni, Heslo, Telefoni_cislo, Email)
values ('Marie', 'Turoňová', '2IODW9HC6BQX9V5S2Y4J4TV8IS0DICPB', 499907559, 'MarieTUronova@jourrapide.com');
INSERT INTO UZIVATEL (Jmeno, Prijmeni, Heslo, Telefoni_cislo, Email)
values ('Jitka', 'Stočesová', '2IODW9HC6BQX9V5S2Y4J4TV8IS0DICPB', 329250435, 'JitkaStocesova@seznam.cz');

insert into Zamestnanec (Rodne_cislo, Uzivatel)
values ( '995211/4700', 1);
insert into Zamestnanec (Rodne_cislo, Uzivatel)
values ('010109/3201', 2);
insert into Zamestnanec (Rodne_cislo, Uzivatel)
values ('561129/470', 3);

INSERT INTO ZAJEMCE (Uzivatel)
VALUES (4);
INSERT INTO ZAJEMCE (Uzivatel)
VALUES (5);
INSERT INTO ZAJEMCE (Uzivatel)
VALUES (6);

INSERT INTO MAJITEL (Uzivatel)
VALUES (7);
INSERT INTO MAJITEL (Uzivatel)
VALUES (8);
INSERT INTO MAJITEL (Uzivatel)
VALUES (9);

INSERT INTO NEMOVITOST (Kategorie, Stav_objektu, Cena, Ulice, Cislo_popisne, Orientactni_cislo, Mesto, PSC, Majitel)
values ('Byt', 'Renovovaný s drobnými nedostatky', '12000000', 'Prokopská', '1935', '4', 'Necín', '26213', 2);
INSERT INTO NEMOVITOST (Kategorie, Stav_objektu, Cena, Ulice, Cislo_popisne, Orientactni_cislo, Mesto, PSC, Majitel)
values ('Byt', 'Renovovaný', '6000000', 'Jiráskova', '482', '65', 'Jabkenice', '29445', 2);
INSERT INTO NEMOVITOST (Kategorie, Typ, Stav_objektu, Cena, Ulice, Cislo_popisne, Orientactni_cislo, Mesto, PSC,
                        Majitel)
values ('Dům', 'Rodinný', 'Novostavba', '350000000', 'Barákova', '783', '40', 'Úvaly', '25082', 2);
INSERT INTO NEMOVITOST (Kategorie, Stav_objektu, Cena, Ulice, Cislo_popisne, Orientactni_cislo, Mesto, PSC, Majitel)
values ('Ostatní', 'Vhodný na demolici', '12000', 'Dačícká', '1211', '150', 'Chrudim', '53701', 3);

INSERT INTO NABIDKA (Cena, Nemovitost, Zajemce)
VALUES ('35000000', 1, 1);
INSERT INTO NABIDKA (Cena, Nemovitost, Zajemce)
VALUES ('25000', 2, 3);
INSERT INTO NABIDKA (Cena, Nemovitost, Zajemce)
VALUES ('25000000', 3, 2);

INSERT INTO SMLOUVA (Datum, Stav, Zamestnanec, Zajemce, Nemovitost)
VALUES (date'2021-10-11', 'Otevřená', 1, 2, 1);
INSERT INTO SMLOUVA (Datum, Stav, Zamestnanec, Zajemce, Nemovitost)
VALUES (date'2021-09-11', 'Uzavřená', 2, 2, 3);
INSERT INTO SMLOUVA (Datum, Stav, Zamestnanec, Zajemce, Nemovitost)
VALUES (date'2021-03-01', 'Otevřená', 2, 3, 2);
INSERT INTO SMLOUVA (Datum, Stav, Zamestnanec, Zajemce, Nemovitost)
VALUES (date'2021-03-01', 'Uzavřená', 1, 3, 2);
INSERT INTO SMLOUVA (Datum, Stav, Zamestnanec, Zajemce, Nemovitost)
VALUES (date'2022-01-01', 'Otevřená', 3, 1, 3);

INSERT INTO PROHLIDKA (Datum_cas, Zamestnanec, Zajemce, Nemovitost)
VALUES (TO_DATE( '2022-02-10 19:00', 'yyyy/mm/dd hh24:mi'), 2, 2, 3);
INSERT INTO PROHLIDKA (Datum_cas, Zamestnanec, Zajemce, Nemovitost)
VALUES (TO_DATE( '2022-05-10 18:00', 'yyyy/mm/dd hh24:mi'), 3, 2, 1);
INSERT INTO PROHLIDKA (Datum_cas, Zamestnanec, Zajemce, Nemovitost)
VALUES (TO_DATE( '2022-04-30 17:00', 'yyyy/mm/dd hh24:mi'), 1, 1, 2);
INSERT INTO PROHLIDKA (Datum_cas, Zamestnanec, Zajemce, Nemovitost)
VALUES (TO_DATE( '2022-02-10 17:00', 'yyyy/mm/dd hh24:mi'), 2, 3, 3);
INSERT INTO PROHLIDKA (Datum_cas, Zamestnanec, Zajemce, Nemovitost)
VALUES (TO_DATE( '2022-02-10 19:00', 'yyyy/mm/dd hh24:mi'), 1, 2, 3);
INSERT INTO PROHLIDKA (Datum_cas, Zamestnanec, Zajemce, Nemovitost)
VALUES (TO_DATE( '2022-02-10 21:00', 'yyyy/mm/dd hh24:mi'), 1, 1, 1);

-- Zobrazí adresu a čas všech naplánováných prohlídek.
SELECT ULICE, CISLO_POPISNE, ORIENTACTNI_CISLO, MESTO, PSC, DATUM_CAS
FROM PROHLIDKA
         JOIN NEMOVITOST N ON PROHLIDKA.NEMOVITOST = N.NEMOVITOSTID
WHERE DATUM_CAS >= CURRENT_DATE;

-- Zobrazí informace o všech nabízených nemovitostech
SELECT NEMOVITOST, ULICE, CISLO_POPISNE, ORIENTACTNI_CISLO, MESTO, PSC, N.CENA
FROM NEMOVITOST
         JOIN NABIDKA N ON NEMOVITOST.NEMOVITOSTID = N.NEMOVITOST;

-- Zobrazí vlastníka nemovitosti v ulici jiráskova pro kontaktovaní majitele.
SELECT JMENO, PRIJMENI, TELEFONI_CISLO
FROM UZIVATEL
         JOIN MAJITEL M ON UZIVATEL.UZIVATELID = M.UZIVATEL
         JOIN NEMOVITOST N ON M.MAJITELID = N.MAJITEL
WHERE ULICE = 'JIRÁSKOVA';

-- Zobrazí součet všech cen jednotlivých kategorií nemovitostí.
SELECT KATEGORIE, SUM(CENA) AS SUMA_CEN
FROM NEMOVITOST
GROUP BY KATEGORIE;

-- Zobrazí kolik prohlídek jednotliví záměstanci uskutečnili v dánem časovém intervalu, kvůli výplatě.
SELECT ZAMESTNANECID, COUNT(PROHLIDKAID) AS PROHLIDEK_CELKEM
FROM PROHLIDKA
         JOIN ZAMESTNANEC Z ON Z.ZAMESTNANECID = PROHLIDKA.ZAMESTNANEC
WHERE DATUM_CAS BETWEEN TO_DATE('2022-02-10 00:00', 'YYYY/MM/DD HH24:MI')
          AND TO_DATE('2022-02-11 00:00', 'YYYY/MM/DD HH24:MI')
GROUP BY ZAMESTNANECID;

-- Vyber nemovitosti s největší nabídkou. Výběr nemovitosti ze které bude největší provize.
SELECT NEMOVITOSTID,
       KATEGORIE,
       TYP,
       STAV_OBJEKTU,
       NEMOVITOST.CENA,
       ULICE,
       CISLO_POPISNE,
       ORIENTACTNI_CISLO,
       MESTO,
       PSC
FROM NEMOVITOST
         JOIN NABIDKA N ON NEMOVITOST.NEMOVITOSTID = N.NEMOVITOST
WHERE N.CENA IN (SELECT MAX(CENA) FROM NABIDKA);

-- Zobrazí zaměstance, kteří neuzavřeli žádnou smlouvu.
SELECT ZAMESTNANECID, JMENO, PRIJMENI, TELEFONI_CISLO
FROM ZAMESTNANEC Z,
     UZIVATEL U
WHERE Z.UZIVATEL = U.UZIVATELID
  AND NOT EXISTS(SELECT *
                 FROM SMLOUVA S
                 WHERE STAV = 'Uzavřená'
                   AND Z.ZAMESTNANECID = S.ZAMESTNANEC);

--Procedury--
--procedura na vypsani poctu zamestnancu, prohlidek a smluv a jejich prumer na zamestnance
CREATE OR REPLACE PROCEDURE "zamestnanec_smlouva_prohlidka"
AS
    "prohlidky" NUMBER;
    "zamestnanci" NUMBER;
    "smlouvy" NUMBER;
    "prohlidky_na_zamestnance" NUMBER;
    "smlouvy_na_zamestnance" NUMBER;
BEGIN
    SELECT COUNT(*) INTO "zamestnanci" FROM Zamestnanec;
    SELECT COUNT(*) INTO "prohlidky" FROM Prohlidka;
    SELECT COUNT(*) INTO "smlouvy" FROM Smlouva;

    "prohlidky_na_zamestnance" := "prohlidky" / "zamestnanci";
    "smlouvy_na_zamestnance" := "smlouvy" / "zamestnanci";

    DBMS_OUTPUT.PUT_LINE( 'Pocet zamestnancu: ' || "zamestnanci"
                        || ' smluv: ' || "smlouvy"
                        || ' prohlidek: ' || "prohlidky");

    DBMS_OUTPUT.PUT_LINE( 'Prumerne kazdy zamestnanec vyridil: ' || "prohlidky_na_zamestnance"
                        || ' prohlidek a ' || "smlouvy_na_zamestnance"
                        || ' smluv');

    EXCEPTION WHEN ZERO_DIVIDE THEN
    BEGIN
        IF "zamestnanci" = 0 THEN
            DBMS_OUTPUT.PUT_LINE('V tabulce nejsou zamestnanci');
        end if;
    end;
end;

BEGIN
    "zamestnanec_smlouva_prohlidka";
end;

CREATE OR REPLACE PROCEDURE provize_prodej (zamestnanec_jmeno varchar2, procenta_provize number)
IS
    id_zamestnance Zamestnanec.ZamestnanecID%TYPE;
    provize_prodej NUMBER;
    provize_celkem NUMBER;
    cena_nemovitest Nemovitost.Cena%Type;
    CURSOR "nemovitosti" IS SELECT Cena FROM Nemovitost WHERE NemovitostID IN (SELECT Nemovitost FROM Smlouva where Zamestnanec = id_zamestnance);
BEGIN
    Select Distinct ZamestnanecID INTO id_zamestnance
    from Zamestnanec JOIN Uzivatel U on U.UzivatelID = Uzivatel
    WHERE U.Jmeno = zamestnanec_jmeno;

    provize_celkem := 0;

    OPEN "nemovitosti";
    LOOP
        FETCH "nemovitosti" INTO cena_nemovitest;

        EXIT WHEN "nemovitosti"%NOTFOUND;

        provize_prodej := cena_nemovitest * procenta_provize / 100;
        provize_celkem := provize_celkem + provize_prodej;
    end loop;
    CLOSE "nemovitosti";

    DBMS_OUTPUT.PUT_LINE(
        zamestnanec_jmeno || ' si s provizi ' || procenta_provize || '% vydelal ' || provize_celkem || 'kč');

    EXCEPTION WHEN NO_DATA_FOUND THEN
    BEGIN
        DBMS_OUTPUT.PUT_LINE(
            zamestnanec_jmeno || ' neprodal zadnou nemovitost');
    end;
end;

BEGIN
    provize_prodej('Petr', 20);
end;

EXPLAIN PLAN FOR
SELECT ZAMESTNANECID, COUNT(PROHLIDKAID) AS PROHLIDEK_CELKEM
FROM PROHLIDKA
         JOIN ZAMESTNANEC Z ON Z.ZAMESTNANECID = PROHLIDKA.ZAMESTNANEC
WHERE DATUM_CAS BETWEEN TO_DATE('2022-02-10 00:00', 'YYYY/MM/DD HH24:MI')
          AND TO_DATE('2022-02-11 00:00', 'YYYY/MM/DD HH24:MI')
GROUP BY ZAMESTNANECID;

SELECT PLAN_TABLE_OUTPUT FROM TABLE ( DBMS_XPLAN.DISPLAY() );

CREATE INDEX zamestnanec_identifikatore on Prohlidka(Zamestnanec, Datum_cas);

EXPLAIN PLAN FOR
SELECT ZAMESTNANECID, COUNT(PROHLIDKAID) AS PROHLIDEK_CELKEM
FROM PROHLIDKA
         JOIN ZAMESTNANEC Z ON Z.ZAMESTNANECID = PROHLIDKA.ZAMESTNANEC
WHERE DATUM_CAS BETWEEN TO_DATE('2022-02-10 00:00', 'YYYY/MM/DD HH24:MI')
          AND TO_DATE('2022-02-11 00:00', 'YYYY/MM/DD HH24:MI')
GROUP BY ZAMESTNANECID;

SELECT PLAN_TABLE_OUTPUT FROM TABLE ( DBMS_XPLAN.DISPLAY() );